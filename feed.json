{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cr4O13",
    "description": "",
    "home_page_url": "https://Cr4O13.github.io",
    "feed_url": "https://Cr4O13.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Cr4O13"
    },
    "items": [
        {
            "id": "https://Cr4O13.github.io/start-with-gci-from-cold-and-dark.html",
            "url": "https://Cr4O13.github.io/start-with-gci-from-cold-and-dark.html",
            "title": "A Start with GCI from &#x27;Cold and Dark&#x27;",
            "summary": "If you have no clue how to get started with GCI, this might be for you. Follow the instructions below for creating your first Air&hellip;",
            "content_html": "<p>If you have no clue how to get started with GCI, this might be for you.</p>\n<h2 id=\"step-by-step-instructions\">Step by Step Instructions</h2>\n<p>Follow the instructions below for creating your first <code>Air Manager</code> panel with GCI Lite. It will take some time to work through it. Don’t take shortcuts, follow all the steps.</p>\n<h3 id=\"download-the-latest-release\">Download the Latest Release</h3>\n<ol>\n<li>Go to my <a href=\"https://github.com/Cr4O13/gci-docs/releases\">GitHub repository release page</a>.</li>\n<li>From the release at the top, open the <code>Assets</code> list.</li>\n<li>Download the asset file <code>Blank_Panel_with_GCI_Lite.siff</code>.</li>\n</ol>\n<h3 id=\"import-into-air-manager\">Import into Air Manager</h3>\n<ol start=\"4\">\n<li>Start <code>Air Manager</code></li>\n<li>Select the <code>Create/Edit</code> tab below the main menu.</li>\n<li>Select <code>Panel</code> from the drop-down list in the left pane.</li>\n<li>Select <code>Import</code> from the toolbar.</li>\n<li>Change to the location where you saved your download.</li>\n<li>Mark the file <code>Blank_Panel_with_GCI_Lite.siff</code>. </li>\n<li>Select <code>Open</code> from the explorer dialog.</li>\n<li>Air Manager displays the import dialog. Confirm with <code>Import</code>.</li>\n<li>Air Manager responds with a message box confirming a successful import. Press <code>Okay</code>.</li>\n</ol>\n<p>In the panel listing you should now see a new panel named <code>Blank Panel with GCI Lite</code>.</p>\n<h3 id=\"make-a-clone\">Make a Clone</h3>\n<ol start=\"13\">\n<li>Mark the new (original) panel.</li>\n<li>Select <code>Clone</code> from the toolbar.</li>\n<li>Air Manager displays the ‘Panel Information’ dialog.</li>\n<li>Rename the panel to <code>My first Panel with GCI</code> </li>\n</ol>\n<p>You may also rename the <code>Default</code> layout. This will be the name of your Panel, when you add it to your <code>Home</code> tab.</p>\n<p>You have now created a personal panel with GCI preinstalled. </p>\n<h3 id=\"run-the-panel\">Run the Panel</h3>\n<p>Every time you start a panel with GCI, the Air Manager log file will contain </p>\n<ul>\n<li>A message with the GCI version runnning</li>\n<li>A listing of all the game controllers connected</li>\n</ul>\n<ol start=\"17\">\n<li>Now <code>Run</code> the panel.</li>\n<li>After a few seconds <code>Stop</code> the panel.</li>\n<li>Open the Air Manager log file in your preferred editor.</li>\n</ol>\n<p>Example of a log file:</p>\n<pre><code>... My First Panel with GCI: GCI: Using Game Controller Integration 1.0.0 Lite (BETA 5)\n... My First Panel with GCI: GCI: Game Controller 'Saitek X52 Pro Flight Control System' recognized.</code></pre>\n\n<p>The first line indicates that the GCI Lite version 1.0.0 (BETA 5) is running.\nThe second line shows that there is a game controller with the name <code>Saitek X52 Pro Flight Control System</code> connected to the PC running Air Manager.</p>\n<ol start=\"20\">\n<li>Take note of the name(s) logged for the game controllers on your system.</li>\n</ol>\n<p>You need this name to configure GCI.</p>\n<h3 id=\"configure-your-controllers\">Configure your Controllers</h3>\n<p>The panel contains a sample configuration for a <code>Saitek X52 Pro Joystick and Throttle Combo</code>, that is used for testing the releases.</p>\n<p>If you own other controller(s) you need to change the configuration file.</p>\n<ol start=\"21\">\n<li>Mark your personal panel <code>My first Panel with GCI</code> </li>\n<li>Select <code>Folder</code> from the toolbar.</li>\n<li>The explorer windows shows the content of your panel folder.</li>\n<li>Open the <code>resources</code> folder.</li>\n<li>The <code>resources</code> folder contains the configuration file <code>gci.json</code>.</li>\n<li>Open that file in your preferred editor.</li>\n</ol>\n<p>At the top it contains some configuration you need to change:</p>\n<pre><code class=\"language-json\">{ \"defaults\": {\n    \"simulator\": \"fs2020\"\n  },\n  \"controllers\": [ \n    { \"ignore\": false,\n      \"log\": true,\n      \"name\": \"Saitek X52 Pro Flight Control System\",\n      ...</code></pre>\n\n<h4 id=\"configure-the-simulator-api\">Configure the Simulator API</h4>\n<p>The field <code>simulator</code> defines which simulator API is to be used. In <code>Air Manager</code> there are different API functions for the simulators supported.</p>\n<ol start=\"27\">\n<li>If you use <code>X-Plane</code> change the field value to “xpl”.</li>\n</ol>\n<pre><code class=\"language-json\">{ \"defaults\": {\n    \"simulator\": \"xpl\"\n      ...</code></pre>\n\n<p>For FSX the value is “fsx” and for P3D the value is “p3d”.</p>\n<h4 id=\"configure-gci-for-the-game-controller-in-use\">Configure GCI for the Game Controller in Use</h4>\n<p>The field <code>controllers</code> is a list of controller specifications. </p>\n<p>A controller specification must identify the controller to use. This is specified in the <code>name</code> field. You need to set the <code>name</code> field to exactly the name shown in the log file.</p>\n<p>Assuming you use a Cyborg X Joystick:</p>\n<pre><code class=\"language-json\">\"controllers\": [ \n    { ...\n      \"name\": \"Cyborg X\",\n      ...</code></pre>\n\n<h4 id=\"ignore-attributes\">Ignore Attributes</h4>\n<p>GCI supports the <code>ignore</code> attribute. You can set the attribute to <code>true</code> or <code>false</code>.\nWhen set to <code>true</code> GCI will ignore that part of the specification. </p>\n<ol start=\"28\">\n<li>Now set all <code>ignore</code> attributes to <code>true</code> except the top one for the game controller.</li>\n</ol>\n<h4 id=\"log-attributes\">Log Attributes</h4>\n<p>GCI also supports the <code>log</code> attribute. You can set the attribute to <code>true</code> or <code>false</code>.\nWhen set to <code>true</code> GCI will log certain events to the log file. </p>\n<p>Keep the <code>log</code> attribute set to <code>true</code>. We need the controller events logged to get additional information.</p>\n<h4 id=\"configure-the-ailerons-axis\">Configure the Ailerons Axis</h4>\n<p>As an example for how to configure an axis we are going to define the input for the ailerons axis.</p>\n<ol start=\"29\">\n<li><code>Run</code> the panel again. This time keep the panel running.</li>\n<li> Move the Joystick as if you want to operate the ailerons (bank the aircraft).</li>\n<li> <code>Stop</code> the panel.</li>\n<li> Open the Air Manager log file in your editor.</li>\n</ol>\n<p>Example of a log file:</p>\n<pre><code class=\"language-json\">... GCI: Game Controller 'Cyborg X' recognized.\n... GCI: Controller 'Cyborg X' registered\n...\n... GCI: 'Cyborg X' called with: (0, 0, 0.0)\n... GCI: 'Cyborg X' called with: (0, 0, -0.017609180882573)\n... GCI: 'Cyborg X' called with: (0, 0, -0.056672871112823)\n... GCI: 'Cyborg X' called with: (0, 0, -0.11917477846146)\n... GCI: 'Cyborg X' called with: (0, 0, -0.15823847055435)\n... GCI: 'Cyborg X' called with: (0, 0, -0.18362987041473)</code></pre>\n\n<p>The first line indicates that the Cyborg X joystick is connected.\nThe second line indicates that the joystick is configured (registered).</p>\n<p>There will be some lines logged when you operate the joystick ailerons axis. This are the events when an input change is received from Air Manager.</p>\n<p>Example: (0, 0, -0.017609180882573)</p>\n<p>The first value (0) is the control type. A control type of ‘0’ indicates that this is an axis. A value of ‘1’ would indicate a button control.</p>\n<p>The second value (0) is the index number. All controls of the same type are numbered in a sequence from ‘0’ to ‘n. Wher ‘n’ is the maxiumum number of controls. The value ‘0’ indicates that this is the ‘first’ axis of our controller.</p>\n<p>The third value (-0.017609180882573) ist the actual input value from the controller.</p>\n<p>We need the type and index value to configure our ailerons axis. </p>\n<p>As the type is ‘0’ we need to place the configuration in the “axis” field. </p>\n<p>The original configuration already cotains an entry for the index ‘0’ axis that does match what we need. Just set the two <code>ignore</code> attributes to <code>false</code>. </p>\n<pre><code class=\"language-json\">      \"axis\": [ \n        { \"ignore\": false,\n          \"log\": true,\n          \"id\": { \"index\": 0, \"label\": \"JOY Stick Sideways\" }, \n          \"write\": {\n            \"on_change\": {\n              \"ignore\": false,\n              \"log\": true,\n              \"variable\": \"AILERON POSITION\",\n              \"unit\": \"Position\"\n            }\n          }  \n        },</code></pre>\n\n<p>If you use another simulator than <code>MSFS2020</code> you need to change the “variable” and “unit” fields to the appropriate values for aileron movements.</p>\n",
            "author": {
                "name": "Cr4O13"
            },
            "tags": [
            ],
            "date_published": "2021-12-10T17:03:29+01:00",
            "date_modified": "2021-12-10T20:59:40+01:00"
        },
        {
            "id": "https://Cr4O13.github.io/array-notation-in-responder-spec.html",
            "url": "https://Cr4O13.github.io/array-notation-in-responder-spec.html",
            "title": "Array Notation in Responder Spec",
            "summary": "GCI Home supports the array notation also for responder specifications. A responder specification using the default JSON object notation may become a bit talkative. \"on_change\":&hellip;",
            "content_html": "<p>GCI Home supports the array notation also for <code>responder</code> specifications.</p>\n<p>A <code>responder</code> specification using the default JSON object notation may become a bit talkative.</p>\n<pre><code class=\"language-json\">\"on_change\": { \n    \"variable\": \"GENERAL ENG THROTTLE LEVER POSITION:1\",\n    \"unit\": \"Percent\", \n    \"output\": \"invert\" \n}</code></pre>\n\n\n<h3 id=\"array-notation\">Array Notation</h3>\n<p>This can be abbreviated with the JSON array notation:</p>\n<pre><code class=\"language-json\">\"on_change\": [ \"GENERAL ENG THROTTLE LEVER POSITION:1\", \"Percent\", \"invert\" ]</code></pre>\n\n\n<p>Just make sure the values are listed in the proper order given below, and a value can only be omitted when it is the last in the sequence.</p>\n<h5 id=\"in-a-write-action\">In a <code>write</code> Action</h5>\n<ul>\n<li>[ var_id, unit_id, output, offset, force ]</li>\n<li>[ var_id, unit_id, output, offset ]</li>\n<li>[ var_id, unit_id, output ]</li>\n<li>[ var_id, unit_id ]</li>\n</ul>\n<h5 id=\"in-a-publish-action\">In a <code>publish</code> Action</h5>\n<ul>\n<li>[ var_id, unit_id, initial, output ]</li>\n<li>[ var_id, unit_id, initial ]</li>\n<li>[ var_id, unit_id ]</li>\n<li>[ var_id ]</li>\n</ul>\n<h5 id=\"in-a-send-action\">In a <code>send</code> Action</h5>\n<ul>\n<li>[ var_id, output ]</li>\n<li>[ var_id ]</li>\n</ul>\n<p>Omitted values are replaced with default values by GCI.</p>\n<h3 id=\"simple-form\">Simple Form</h3>\n<p>An array with just a single <code>var_id</code> can be simplified for an even shorter form:</p>\n<p>Instead of writing</p>\n<pre><code class=\"language-json\">\"on_true\": [ \"AP_MASTER\" ]</code></pre>\n\n<p>just write</p>\n<pre><code class=\"language-json\">\"on_true\": \"AP_MASTER\"</code></pre>\n\n",
            "author": {
                "name": "Cr4O13"
            },
            "tags": [
                   "Responder",
                   "Home",
                   "GCI"
            ],
            "date_published": "2021-12-10T01:00:49+01:00",
            "date_modified": "2021-12-10T15:46:28+01:00"
        },
        {
            "id": "https://Cr4O13.github.io/support-for-response-presets.html",
            "url": "https://Cr4O13.github.io/support-for-response-presets.html",
            "title": "Support for Response Presets",
            "summary": "GCI Home v1.0 BETA 7 introduces ‘Response Presets’ to simplify the configuration of an axis with output response specifications. Response presets support reuse of responses&hellip;",
            "content_html": "<p>GCI Home v1.0 BETA 7 introduces ‘Response Presets’ to simplify the configuration of an axis with output response specifications.</p>\n<p>Response presets support reuse of responses and help keeping the axis configuration readable.</p>\n<p>Before BETA 7 an axis output response had to be defined literally in the axis specification:</p>\n<pre><code class=\"language-json\">{ \"axis\": [\n  { \"id\": [ 2, \"Pedal Rotation\" ], \n    \"write\": [ \"RUDDER POSITION\", \"Position\", { \n        \"response\": [\n          [ -1.000, -1.000 ], \n          [ -0.924, -0.836 ], \n          [ -0.838, -0.687 ], \n          [ -0.740, -0.552 ], \n          [ -0.629, -0.429 ], \n          [ -0.501, -0.314 ], \n          [ -0.355, -0.206 ], \n          [ -0.189, -0.102 ], \n          [  0.000,  0.000 ], \n          [  0.189,  0.102 ], \n          [  0.355,  0.206 ], \n          [  0.501,  0.314 ], \n          [  0.629,  0.429 ], \n          [  0.740,  0.552 ], \n          [  0.838,  0.687 ], \n          [  0.924,  0.836 ], \n          [  1.000,  1.000 ]\n        ]\n      }\n    ] \n  }\n}</code></pre>\n\n<h3 id=\"response-preset-definition\">Response Preset Definition</h3>\n<p>Starting from BETA 7 multiple response presets can be defined in a <code>responses</code> list  placed in the <code>defaults</code> specification. The preset must provide a preset <code>name</code> and the <code>response settings</code> as usual:</p>\n<pre><code class=\"language-json\">\"defaults\": {\n  \"responses\": {\n    \"flight-controls\": [\n      [ -1.000, -1.000 ], \n      [ -0.924, -0.836 ], \n      [ -0.838, -0.687 ], \n      [ -0.740, -0.552 ], \n      [ -0.629, -0.429 ], \n      [ -0.501, -0.314 ], \n      [ -0.355, -0.206 ], \n      [ -0.189, -0.102 ], \n      [  0.000,  0.000 ], \n      [  0.189,  0.102 ], \n      [  0.355,  0.206 ], \n      [  0.501,  0.314 ], \n      [  0.629,  0.429 ], \n      [  0.740,  0.552 ], \n      [  0.838,  0.687 ], \n      [  0.924,  0.836 ], \n      [  1.000,  1.000 ]\n    ]\n  }\n}</code></pre>\n\n<p>Once defined, the preset name can be used in multiple axis specifications as the value of the response field:</p>\n<pre><code class=\"language-json\">{ \"axis\": [\n    { \"id\": [ 2, \"Pedal Rotation\" ], \n      \"write\": [ \"RUDDER POSITION\", \"Position\", { \"response\": \"flight-controls\" } ]\n    }\n  ]\n}</code></pre>\n\n<h3 id=\"response-presets-file\">Response Presets File</h3>\n<p>To assist in the management of response presets, additionally to the above, the response presets can be moved to a separate JSON configuration file (e.g. “responses.json”). The file must reside in the resources folder.</p>\n<pre><code class=\"language-json\">{ \"flight-controls\": [\n    [ -1.000, -1.000 ], \n    [ -0.924, -0.836 ], \n    [ -0.838, -0.687 ], \n    [ -0.740, -0.552 ], \n    [ -0.629, -0.429 ], \n    [ -0.501, -0.314 ], \n    [ -0.355, -0.206 ], \n    [ -0.189, -0.102 ], \n    [  0.000,  0.000 ], \n    [  0.189,  0.102 ], \n    [  0.355,  0.206 ], \n    [  0.501,  0.314 ], \n    [  0.629,  0.429 ], \n    [  0.740,  0.552 ], \n    [  0.838,  0.687 ], \n    [  0.924,  0.836 ], \n    [  1.000,  1.000 ]\n  ],\n    ...\n}</code></pre>\n\n<p>In the defaults specification the responses field just references the file name:</p>\n<pre><code class=\"language-json\">\"defaults\": {\n  \"responses\": \"responses.json\"\n}</code></pre>\n\n<p>All response presets defined in the referred file will be available for use in the axis specifications.</p>\n",
            "author": {
                "name": "Cr4O13"
            },
            "tags": [
                   "Response",
                   "Home",
                   "GCI"
            ],
            "date_published": "2021-12-09T23:06:16+01:00",
            "date_modified": "2021-12-10T15:42:55+01:00"
        }
    ]
}
