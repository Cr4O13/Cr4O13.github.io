<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Cr4O13</title>
    <link href="https://Cr4O13.github.io/feed.xml" rel="self" />
    <link href="https://Cr4O13.github.io" />
    <updated>2021-12-10T22:04:46+01:00</updated>
    <author>
        <name>Cr4O13</name>
    </author>
    <id>https://Cr4O13.github.io</id>

    <entry>
        <title>A Start with GCI from &#x27;Cold and Dark&#x27;</title>
        <author>
            <name>Cr4O13</name>
        </author>
        <link href="https://Cr4O13.github.io/start-with-gci-from-cold-and-dark.html"/>
        <id>https://Cr4O13.github.io/start-with-gci-from-cold-and-dark.html</id>
            <category term="Setup"/>
            <category term="Home"/>
            <category term="GCI"/>

        <updated>2021-12-10T22:03:10+01:00</updated>
            <summary>
                <![CDATA[
                    <p>If you have no clue how to get started with GCI, this might be for you.</p>
<h2 id="step-by-step-instructions">Step by Step Instructions</h2>
<p>Follow the instructions below for creating your first <code>Air Manager</code> panel with GCI Lite. 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>If you have no clue how to get started with GCI, this might be for you.</p>
<h2 id="step-by-step-instructions">Step by Step Instructions</h2>
<p>Follow the instructions below for creating your first <code>Air Manager</code> panel with GCI Lite. <hr id="read-more" /> It will take some time to work through it. Don’t take shortcuts, follow all the steps.</p>
<h3 id="download-the-latest-release">Download the Latest Release</h3>
<ol>
<li>Go to my <a href="https://github.com/Cr4O13/gci-docs/releases">GitHub repository release page</a>.</li>
<li>From the release at the top, open the <code>Assets</code> list.</li>
<li>Download the asset file <code>Blank_Panel_with_GCI_Lite.siff</code>.</li>
</ol>
<h3 id="import-into-air-manager">Import into Air Manager</h3>
<ol start="4">
<li>Start <code>Air Manager</code></li>
<li>Select the <code>Create/Edit</code> tab below the main menu.</li>
<li>Select <code>Panel</code> from the drop-down list in the left pane.</li>
<li>Select <code>Import</code> from the toolbar.</li>
<li>Change to the location where you saved your download.</li>
<li>Mark the file <code>Blank_Panel_with_GCI_Lite.siff</code>. </li>
<li>Select <code>Open</code> from the explorer dialog.</li>
<li>Air Manager displays the import dialog. Confirm with <code>Import</code>.</li>
<li>Air Manager responds with a message box confirming a successful import. Press <code>Okay</code>.</li>
</ol>
<p>In the panel listing you should now see a new panel named <code>Blank Panel with GCI Lite</code>.</p>
<h3 id="make-a-clone">Make a Clone</h3>
<ol start="13">
<li>Mark the new (original) panel.</li>
<li>Select <code>Clone</code> from the toolbar.</li>
<li>Air Manager displays the ‘Panel Information’ dialog.</li>
<li>Rename the panel to <code>My first Panel with GCI</code> </li>
</ol>
<p>You may also rename the <code>Default</code> layout. This will be the name of your Panel, when you add it to your <code>Home</code> tab.</p>
<p>You have now created a personal panel with GCI preinstalled. </p>
<h3 id="run-the-panel">Run the Panel</h3>
<p>Every time you start a panel with GCI, the Air Manager log file will contain </p>
<ul>
<li>A message with the GCI version runnning</li>
<li>A listing of all the game controllers connected</li>
</ul>
<ol start="17">
<li>Now <code>Run</code> the panel.</li>
<li>After a few seconds <code>Stop</code> the panel.</li>
<li>Open the Air Manager log file in your preferred editor.</li>
</ol>
<p>Example of a log file:</p>
<pre><code>... My First Panel with GCI: GCI: Using Game Controller Integration 1.0.0 Lite (BETA 5)
... My First Panel with GCI: GCI: Game Controller 'Saitek X52 Pro Flight Control System' recognized.</code></pre>

<p>The first line indicates that the GCI Lite version 1.0.0 (BETA 5) is running.
The second line shows that there is a game controller with the name <code>Saitek X52 Pro Flight Control System</code> connected to the PC running Air Manager.</p>
<ol start="20">
<li>Take note of the name(s) logged for the game controllers on your system.</li>
</ol>
<p>You need this name to configure GCI.</p>
<h3 id="configure-your-controllers">Configure your Controllers</h3>
<p>The panel contains a sample configuration for a <code>Saitek X52 Pro Joystick and Throttle Combo</code>, that is used for testing the releases.</p>
<p>If you own other controller(s) you need to change the configuration file.</p>
<ol start="21">
<li>Mark your personal panel <code>My first Panel with GCI</code> </li>
<li>Select <code>Folder</code> from the toolbar.</li>
<li>The explorer windows shows the content of your panel folder.</li>
<li>Open the <code>resources</code> folder.</li>
<li>The <code>resources</code> folder contains the configuration file <code>gci.json</code>.</li>
<li>Open that file in your preferred editor.</li>
</ol>
<p>At the top it contains some configuration you need to change:</p>
<pre><code class="language-json">{ "defaults": {
    "simulator": "fs2020"
  },
  "controllers": [ 
    { "ignore": false,
      "log": true,
      "name": "Saitek X52 Pro Flight Control System",
      ...</code></pre>

<h4 id="configure-the-simulator-api">Configure the Simulator API</h4>
<p>The field <code>simulator</code> defines which simulator API is to be used. In <code>Air Manager</code> there are different API functions for the simulators supported.</p>
<ol start="27">
<li>If you use <code>X-Plane</code> change the field value to “xpl”.</li>
</ol>
<pre><code class="language-json">{ "defaults": {
    "simulator": "xpl"
      ...</code></pre>

<p>For FSX the value is “fsx” and for P3D the value is “p3d”.</p>
<h4 id="configure-gci-for-the-game-controller-in-use">Configure GCI for the Game Controller in Use</h4>
<p>The field <code>controllers</code> is a list of controller specifications. </p>
<p>A controller specification must identify the controller to use. This is specified in the <code>name</code> field. You need to set the <code>name</code> field to exactly the name shown in the log file.</p>
<p>Assuming you use a Cyborg X Joystick:</p>
<pre><code class="language-json">"controllers": [ 
    { ...
      "name": "Cyborg X",
      ...</code></pre>

<h4 id="ignore-attributes">Ignore Attributes</h4>
<p>GCI supports the <code>ignore</code> attribute. You can set the attribute to <code>true</code> or <code>false</code>.
When set to <code>true</code> GCI will ignore that part of the specification. </p>
<ol start="28">
<li>Now set all <code>ignore</code> attributes to <code>true</code> except the top one for the game controller.</li>
</ol>
<h4 id="log-attributes">Log Attributes</h4>
<p>GCI also supports the <code>log</code> attribute. You can set the attribute to <code>true</code> or <code>false</code>.
When set to <code>true</code> GCI will log certain events to the log file. </p>
<p>Keep the <code>log</code> attribute set to <code>true</code>. We need the controller events logged to get additional information.</p>
<h4 id="configure-the-ailerons-axis">Configure the Ailerons Axis</h4>
<p>As an example for how to configure an axis we are going to define the input for the ailerons axis.</p>
<ol start="29">
<li><code>Run</code> the panel again. This time keep the panel running.</li>
<li> Move the Joystick as if you want to operate the ailerons (bank the aircraft).</li>
<li> <code>Stop</code> the panel.</li>
<li> Open the Air Manager log file in your editor.</li>
</ol>
<p>Example of a log file:</p>
<pre><code class="language-json">... GCI: Game Controller 'Cyborg X' recognized.
... GCI: Controller 'Cyborg X' registered
...
... GCI: 'Cyborg X' called with: (0, 0, 0.0)
... GCI: 'Cyborg X' called with: (0, 0, -0.017609180882573)
... GCI: 'Cyborg X' called with: (0, 0, -0.056672871112823)
... GCI: 'Cyborg X' called with: (0, 0, -0.11917477846146)
... GCI: 'Cyborg X' called with: (0, 0, -0.15823847055435)
... GCI: 'Cyborg X' called with: (0, 0, -0.18362987041473)</code></pre>

<p>The first line indicates that the Cyborg X joystick is connected.
The second line indicates that the joystick is configured (registered).</p>
<p>There will be some lines logged when you operate the joystick ailerons axis. This are the events when an input change is received from Air Manager.</p>
<p>Example: (0, 0, -0.017609180882573)</p>
<p>The first value (0) is the control type. A control type of ‘0’ indicates that this is an axis. A value of ‘1’ would indicate a button control.</p>
<p>The second value (0) is the index number. All controls of the same type are numbered in a sequence from ‘0’ to ‘n. Wher ‘n’ is the maxiumum number of controls. The value ‘0’ indicates that this is the ‘first’ axis of our controller.</p>
<p>The third value (-0.017609180882573) ist the actual input value from the controller.</p>
<p>We need the type and index value to configure our ailerons axis. </p>
<p>As the type is ‘0’ we need to place the configuration in the “axis” field. </p>
<p>The original configuration already cotains an entry for the index ‘0’ axis that does match what we need. Just set the two <code>ignore</code> attributes to <code>false</code>. </p>
<pre><code class="language-json">      "axis": [ 
        { "ignore": false,
          "log": true,
          "id": { "index": 0, "label": "JOY Stick Sideways" }, 
          "write": {
            "on_change": {
              "ignore": false,
              "log": true,
              "variable": "AILERON POSITION",
              "unit": "Position"
            }
          }  
        },</code></pre>

<p>If you use another simulator than <code>MSFS2020</code> you need to change the “variable” and “unit” fields to the appropriate values for aileron movements.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Array Notation in Responder Spec</title>
        <author>
            <name>Cr4O13</name>
        </author>
        <link href="https://Cr4O13.github.io/array-notation-in-responder-spec.html"/>
        <id>https://Cr4O13.github.io/array-notation-in-responder-spec.html</id>
            <category term="Responder"/>
            <category term="Home"/>
            <category term="GCI"/>

        <updated>2021-12-10T22:04:29+01:00</updated>
            <summary>
                <![CDATA[
                    <p>GCI Home supports the array notation also for <code>responder</code> specifications.</p>
<p>A <code>responder</code> specification using the default JSON object notation may become a bit talkative.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>GCI Home supports the array notation also for <code>responder</code> specifications.</p>
<p>A <code>responder</code> specification using the default JSON object notation may become a bit talkative.<hr id="read-more" /></p>
<pre><code class="language-json">"on_change": { 
    "variable": "GENERAL ENG THROTTLE LEVER POSITION:1",
    "unit": "Percent", 
    "output": "invert" 
}</code></pre>


<h3 id="array-notation">Array Notation</h3>
<p>This can be abbreviated with the JSON array notation:</p>
<pre><code class="language-json">"on_change": [ "GENERAL ENG THROTTLE LEVER POSITION:1", "Percent", "invert" ]</code></pre>


<p>Just make sure the values are listed in the proper order given below, and a value can only be omitted when it is the last in the sequence.</p>
<h5 id="in-a-write-action">In a <code>write</code> Action</h5>
<ul>
<li>[ var_id, unit_id, output, offset, force ]</li>
<li>[ var_id, unit_id, output, offset ]</li>
<li>[ var_id, unit_id, output ]</li>
<li>[ var_id, unit_id ]</li>
</ul>
<h5 id="in-a-publish-action">In a <code>publish</code> Action</h5>
<ul>
<li>[ var_id, unit_id, initial, output ]</li>
<li>[ var_id, unit_id, initial ]</li>
<li>[ var_id, unit_id ]</li>
<li>[ var_id ]</li>
</ul>
<h5 id="in-a-send-action">In a <code>send</code> Action</h5>
<ul>
<li>[ var_id, output ]</li>
<li>[ var_id ]</li>
</ul>
<p>Omitted values are replaced with default values by GCI.</p>
<h3 id="simple-form">Simple Form</h3>
<p>An array with just a single <code>var_id</code> can be simplified for an even shorter form:</p>
<p>Instead of writing</p>
<pre><code class="language-json">"on_true": [ "AP_MASTER" ]</code></pre>

<p>just write</p>
<pre><code class="language-json">"on_true": "AP_MASTER"</code></pre>


            ]]>
        </content>
    </entry>
    <entry>
        <title>Support for Response Presets</title>
        <author>
            <name>Cr4O13</name>
        </author>
        <link href="https://Cr4O13.github.io/support-for-response-presets.html"/>
        <id>https://Cr4O13.github.io/support-for-response-presets.html</id>
            <category term="Response"/>
            <category term="Home"/>
            <category term="GCI"/>

        <updated>2021-12-10T22:04:46+01:00</updated>
            <summary>
                <![CDATA[
                    GCI Home v1.0 BETA 7 introduces ‘Response Presets’ to simplify the configuration of an axis with output response specifications. Response presets support reuse of responses&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>GCI Home v1.0 BETA 7 introduces ‘Response Presets’ to simplify the configuration of an axis with output response specifications.</p>
<p>Response presets support reuse of responses and help keeping the axis configuration readable.</p>
<p>Before BETA 7 an axis output response had to be defined literally in the axis specification:</p>
<pre><code class="language-json">{ "axis": [
  { "id": [ 2, "Pedal Rotation" ], 
    "write": [ "RUDDER POSITION", "Position", { 
        "response": [
          [ -1.000, -1.000 ], 
          [ -0.924, -0.836 ], 
          [ -0.838, -0.687 ], 
          [ -0.740, -0.552 ], 
          [ -0.629, -0.429 ], 
          [ -0.501, -0.314 ], 
          [ -0.355, -0.206 ], 
          [ -0.189, -0.102 ], 
          [  0.000,  0.000 ], 
          [  0.189,  0.102 ], 
          [  0.355,  0.206 ], 
          [  0.501,  0.314 ], 
          [  0.629,  0.429 ], 
          [  0.740,  0.552 ], 
          [  0.838,  0.687 ], 
          [  0.924,  0.836 ], 
          [  1.000,  1.000 ]
        ]
      }
    ] 
  }
}</code></pre>

<h3 id="response-preset-definition">Response Preset Definition</h3>
<p>Starting from BETA 7 multiple response presets can be defined in a <code>responses</code> list  placed in the <code>defaults</code> specification. The preset must provide a preset <code>name</code> and the <code>response settings</code> as usual:</p>
<pre><code class="language-json">"defaults": {
  "responses": {
    "flight-controls": [
      [ -1.000, -1.000 ], 
      [ -0.924, -0.836 ], 
      [ -0.838, -0.687 ], 
      [ -0.740, -0.552 ], 
      [ -0.629, -0.429 ], 
      [ -0.501, -0.314 ], 
      [ -0.355, -0.206 ], 
      [ -0.189, -0.102 ], 
      [  0.000,  0.000 ], 
      [  0.189,  0.102 ], 
      [  0.355,  0.206 ], 
      [  0.501,  0.314 ], 
      [  0.629,  0.429 ], 
      [  0.740,  0.552 ], 
      [  0.838,  0.687 ], 
      [  0.924,  0.836 ], 
      [  1.000,  1.000 ]
    ]
  }
}</code></pre>

<p>Once defined, the preset name can be used in multiple axis specifications as the value of the response field:</p>
<pre><code class="language-json">{ "axis": [
    { "id": [ 2, "Pedal Rotation" ], 
      "write": [ "RUDDER POSITION", "Position", { "response": "flight-controls" } ]
    }
  ]
}</code></pre>

<h3 id="response-presets-file">Response Presets File</h3>
<p>To assist in the management of response presets, additionally to the above, the response presets can be moved to a separate JSON configuration file (e.g. “responses.json”). The file must reside in the resources folder.</p>
<pre><code class="language-json">{ "flight-controls": [
    [ -1.000, -1.000 ], 
    [ -0.924, -0.836 ], 
    [ -0.838, -0.687 ], 
    [ -0.740, -0.552 ], 
    [ -0.629, -0.429 ], 
    [ -0.501, -0.314 ], 
    [ -0.355, -0.206 ], 
    [ -0.189, -0.102 ], 
    [  0.000,  0.000 ], 
    [  0.189,  0.102 ], 
    [  0.355,  0.206 ], 
    [  0.501,  0.314 ], 
    [  0.629,  0.429 ], 
    [  0.740,  0.552 ], 
    [  0.838,  0.687 ], 
    [  0.924,  0.836 ], 
    [  1.000,  1.000 ]
  ],
    ...
}</code></pre>

<p>In the defaults specification the responses field just references the file name:</p>
<pre><code class="language-json">"defaults": {
  "responses": "responses.json"
}</code></pre>

<p>All response presets defined in the referred file will be available for use in the axis specifications.</p>

            ]]>
        </content>
    </entry>
</feed>
